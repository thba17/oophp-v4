<?php
namespace Thba17\Dice100;

/**
 * Class for DiceHand
 */
class DiceHand
{
    private $dices;
    private $sides;
    private $results = [];
    private $value = [];

    /**
     * values A function to return an array containing all dice values for one throw
     * @return array Containing the values of the thrown dices
     */
    public function values()
    {
        return $this->results;
    }

    /**
     * sum A function to return the sum of all dice values for one throw
     * @return int The sum of all dices thrown
     */
    public function sum()
    {
        return array_sum($this->results);
    }

    /**
     * average The average value of all dices thrown rounded to two decimals
     * @return int The rounded average of the dices thrown
     */
    public function average()
    {
        return round($this->sum()/count($this->results), 2);
    }

    /**
     * roll A function to roll the dices. The dice values are stored in an array.
     * @return void
     */
    public function roll()
    {
        $game = new Dice($this->sides);
        for ($i = 1; $i <= $this->dices; $i++) {
            $this->value = $game->throwDice(1);
            $this->results[$i] = $this->value[1];
        }
    }

    /**
     * Constructor for class DiceHand
     *
     * This is the constructor for the Dice class. It will take as in parameter
     * the number of times the dice should be thrown.
     *
     * @param integer $dices The number of dices to throw.
     * @param integer $sides The number of sides of the dices.
     */
    public function __construct(int $dices = 5, int $sides = 6)
    {
        if ($dices < 1 || $sides < 2) {
            throw new DiceException("We need at least one (1) dice with at least 2 sides.");
        }
        $this->dices = $dices;
        $this->sides = $sides;
        // echo __METHOD__ . "\n";
    }

    /**
     * Destructor for class Dice
     */
    public function __destruct()
    {
        // echo __METHOD__ . "\n";
    }
}

